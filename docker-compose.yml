# Define networks for isolation
networks:
  frontend_net:
    driver: bridge
  backend_net:
    driver: bridge
  db_net:
    driver: bridge
  monitoring_net:
    driver: bridge

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    networks:
      - frontend_net
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://backend:8000
      - NEXT_PUBLIC_KEYCLOAK_URL=http://keycloak:8080
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      backend:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 500M

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    networks:
      - frontend_net
      - backend_net
    ports:
      - "8000:8000"
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - KEYCLOAK_HOST=keycloak
      - KEYCLOAK_PORT=8080
      - KEYCLOAK_REALM=${KEYCLOAK_REALM}
      - KEYCLOAK_CLIENT_ID=${KEYCLOAK_CLIENT_ID}
      - KEYCLOAK_CLIENT_SECRET=${KEYCLOAK_CLIENT_SECRET}
      - AI_SERVICE_URL=http://ai_service:8001
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
    secrets:
      - postgres_password
      - redis_password
      - keycloak_secret

  worker:
    build:
      context: ./worker
      dockerfile: Dockerfile
    networks:
      - backend_net
      - db_net
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    healthcheck:
      test: ["CMD", "celery", "-A", "worker.main", "inspect", "ping", "-d", "celery@%h"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '0.75'
          memory: 750M
    secrets:
      - postgres_password
      - redis_password

  ai_service:
    build:
      context: ./ai_service
      dockerfile: Dockerfile
    networks:
      - backend_net
    ports:
      - "8001:8001"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - ./ai_service/models:/app/models:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
    secrets:
      - openai_api_key
      - redis_password

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    networks:
      - frontend_net
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/waf:/etc/nginx/waf:ro
      - ./nginx/certs:/etc/nginx/certs:ro
      - ./nginx/logs:/var/log/nginx
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 256M

  postgres:
    image: postgres:15-alpine
    networks:
      - db_net
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: chatbot
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/services/postgres/init:/docker-entrypoint-initdb.d:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d chatbot"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
    secrets:
      - postgres_password

  redis:
    build:
      context: ./docker/services/redis
      dockerfile: Dockerfile
    networks:
      - db_net
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-redis}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --appendonly yes
      --save 900 1
      --save 300 10
      --save 60 10000
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
    secrets:
      - redis_password
    ulimits:
      nproc: 65535
      nofile:
        soft: 65535
        hard: 65535

  keycloak:
    build:
      context: ./docker/services/keycloak
      dockerfile: Dockerfile
    networks:
      - frontend_net
      - db_net
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD:-admin}
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://postgres:5432/chatbot
      - KC_DB_USERNAME=postgres
      - KC_DB_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - KC_HTTP_ENABLED=true
      - KC_PROXY=edge
      - KC_HTTP_RELATIVE_PATH=/
      - KC_HEALTH_ENABLED=true
      - KC_METRICS_ENABLED=true
      - KC_HOSTNAME_STRICT=false
      - KC_HOSTNAME_STRICT_HTTPS=false
      - KC_TRANSACTION_XA_ENABLED=false
      - KC_TRANSACTION_RECOVERY_ENABLED=false
      - KC_HOSTNAME_URL=http://localhost:8080
      - KC_HOSTNAME_ADMIN_URL=http://localhost:8080
      - JAVA_OPTS_APPEND=-Djgroups.dns.query=keycloak -Dquarkus.transaction-manager.enable-recovery=false
    volumes:
      - keycloak_data:/opt/keycloak/data
    ports:
      - "8080:8080"
      - "8443:8443"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    depends_on:
      postgres:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
    secrets:
      - keycloak_admin_password
      - postgres_password

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  keycloak_data:
    driver: local

secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt
  redis_password:
    file: ./secrets/redis_password.txt
  keycloak_secret:
    file: ./secrets/keycloak_secret.txt
  keycloak_admin_password:
    file: ./secrets/keycloak_admin_password.txt
  openai_api_key:
    file: ./secrets/openai_api_key.txt 