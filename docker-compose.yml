# Define networks for isolation
networks:
  frontend_net:
    driver: bridge
  backend_net:
    driver: bridge
  db_net:
    driver: bridge
  monitoring_net:
    driver: bridge

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    networks:
      - frontend_net
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://backend:8000
      - NEXT_PUBLIC_KEYCLOAK_URL=http://keycloak:8080
    #healthcheck:
    #  test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
    #  interval: 30s
    #  timeout: 10s
    #  retries: 3
    depends_on:
      backend:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 500M

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    networks:
      - frontend_net
      - backend_net
      - db_net
    ports:
      - "8000:8000"
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - KEYCLOAK_HOST=keycloak
      - KEYCLOAK_PORT=8080
      - KEYCLOAK_REALM=${KEYCLOAK_REALM}
      - KEYCLOAK_CLIENT_ID=${KEYCLOAK_CLIENT_ID}
      - KEYCLOAK_CLIENT_SECRET=${KEYCLOAK_CLIENT_SECRET}
      - AI_SERVICE_URL=http://ai_service:8001
      - KEYCLOAK_WEBHOOK_SECRET=${KEYCLOAK_WEBHOOK_SECRET}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
    secrets:
      - postgres_password
      - redis_password
      - keycloak_secret

  worker:
    build:
      context: ./worker
      dockerfile: Dockerfile
    networks:
      - backend_net
      - db_net
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    healthcheck:
      test: ["CMD", "celery", "-A", "worker.main", "inspect", "ping", "-d", "celery@%h"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '0.75'
          memory: 750M
    secrets:
      - postgres_password
      - redis_password

  ai_service:
    build:
      context: ./ai_service
      dockerfile: Dockerfile
    networks:
      - backend_net
      - db_net
    ports:
      - "8001:8001"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - ./ai_service/models:/app/models:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
    secrets:
      - openai_api_key
      - redis_password

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    networks:
      - frontend_net
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/waf:/etc/nginx/waf:ro
      - ./nginx/certs:/etc/nginx/certs:ro
      - ./nginx/logs:/var/log/nginx
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      #frontend:
        #condition: service_healthy
      backend:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 256M

  postgres:
    image: postgres:15-alpine
    networks:
      - db_net
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: chatbot
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/services/postgres/init:/docker-entrypoint-initdb.d:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d chatbot"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
    secrets:
      - postgres_password

  redis:
    build:
      context: ./docker/services/redis
      dockerfile: Dockerfile
    networks:
      - db_net
      - backend_net
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-redis}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --appendonly yes
      --save 900 1
      --save 300 10
      --save 60 10000
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
    secrets:
      - redis_password
    ulimits:
      nproc: 65535
      nofile:
        soft: 65535
        hard: 65535

  keycloak:
    build:
      context: ./docker/services/keycloak
      dockerfile: Dockerfile
    networks:
      - frontend_net
      - db_net
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD:-admin}
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://postgres:5432/chatbot
      - KC_DB_USERNAME=postgres
      - KC_DB_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - KC_HTTP_ENABLED=true
      - KC_PROXY=edge
      - KC_HTTP_RELATIVE_PATH=/
      - KC_HEALTH_ENABLED=true
      - KC_METRICS_ENABLED=true
      - KC_HOSTNAME_STRICT=false
      - KC_HOSTNAME_STRICT_HTTPS=false
      - KC_TRANSACTION_XA_ENABLED=false
      - KC_TRANSACTION_RECOVERY_ENABLED=false
      - KC_HOSTNAME_URL=http://localhost:8080
      - KC_HOSTNAME_ADMIN_URL=http://localhost:8080
      - JAVA_OPTS_APPEND=-Djgroups.dns.query=keycloak -Dquarkus.transaction-manager.enable-recovery=false
      - KEYCLOAK_WEBHOOK_SECRET=${KEYCLOAK_WEBHOOK_SECRET}
    volumes:
      - keycloak_data:/opt/keycloak/data
    ports:
      - "8080:8080"
      - "8443:8443"
    healthcheck:
      test: ["CMD-SHELL", "bash -c '</dev/tcp/localhost/8080'"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    depends_on:
      postgres:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
    secrets:
      - keycloak_admin_password
      - postgres_password

  redis_exporter:
    image: oliver006/redis_exporter:v1.72.1
    networks:
      - db_net # Same network as Redis
      - monitoring_net
    environment:
      - REDIS_ADDR=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis} # Ensure this matches your Redis setup
    ports:
      - "9121:9121"
    depends_on:
      - redis
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M

  postgres_exporter:
    image: bitnami/postgres-exporter:latest
    networks:
      - db_net
      - monitoring_net
    environment:
      - DATA_SOURCE_NAME=postgresql://postgres:${POSTGRES_PASSWORD:-postgres}@postgres:5432/chatbot?sslmode=disable
    ports:
      - "9187:9187"
    depends_on:
      - postgres
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M

  nginx_exporter:
    image: nginx/nginx-prometheus-exporter:1.1.0
    command:
      - '-nginx.scrape-uri=http://nginx/nginx_status'
    networks:
      - frontend_net
      - monitoring_net
    ports:
      - "9113:9113"
    depends_on:
      - nginx
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M

  prometheus:
    image: prom/prometheus:v2.47.2
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    networks:
      - monitoring_net
      - backend_net # To scrape backend, etc.
      - db_net      # To scrape redis_exporter, keycloak
      - frontend_net # To scrape Keycloak (if on frontend_net), Nginx
    depends_on:
      - keycloak # Ensure keycloak is up for scraping
      - redis_exporter # Ensure exporter is up
      - postgres_exporter
      - nginx_exporter
      # Add dependencies for other services you want to scrape, e.g., backend
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G

  grafana:
    image: grafana/grafana:10.1.5
    volumes:
      - grafana_data:/var/lib/grafana
      # You can add provisioning for datasources and dashboards here
      # - ./monitoring/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      # - ./monitoring/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
    ports:
      - "3001:3000" # Grafana runs on 3000, mapping to 3001 to avoid conflict with frontend
    networks:
      - monitoring_net
    depends_on:
      - prometheus
      - loki
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      # GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  loki:
    image: grafana/loki:2.9.2
    volumes:
      - ./monitoring/loki/loki-config.yml:/etc/loki/loki-config.yml
      - loki_data:/loki
    command: -config.file=/etc/loki/loki-config.yml
    ports:
      - "3100:3100"
    networks:
      - monitoring_net
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  promtail:
    image: grafana/promtail:2.9.2
    volumes:
      - ./monitoring/promtail/promtail-config.yml:/etc/promtail/promtail-config.yml
      - /var/run/docker.sock:/var/run/docker.sock:ro # To discover containers
      # You might need to map log directories from host if not using docker.sock for discovery
      # - /var/log:/var/log:ro 
    command: -config.file=/etc/promtail/promtail-config.yml
    networks:
      - monitoring_net
    depends_on:
      - loki
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  keycloak_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local

secrets:
  postgres_password:
    file: ./scripts/secrets/postgres_password.txt
  redis_password:
    file: ./scripts/secrets/redis_password.txt
  keycloak_secret:
    file: ./scripts/secrets/keycloak_secret.txt
  keycloak_admin_password:
    file: ./scripts/secrets/keycloak_admin_password.txt
  openai_api_key:
    file: ./scripts/secrets/openai_api_key.txt 